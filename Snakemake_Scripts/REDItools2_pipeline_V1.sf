
# REDItools2.0 pipeline

configfile: "config_editing.yaml"  # default, can be overridden with --configfile

SOFT_DIR      = config["software_dir"]
RESOURCE_DIR = config["resource_dir"]
OUTPUT_DIR   = config["output_dir"]
RNA_BAM      = config["RNA_bam"]
DNA_BAM      = config["DNA_bam"]
REF_FA       = config["ref_fa"]
RNA_ID       = config["RNA_ID"]
DNA_ID       = config["DNA_ID"]
CUSTOM_BED   = config.get("custom_bed", "")

COVERAGE_THRESH    = config["coverage_threshold"]
FREQUENCY_THRESH_MIN   = config["frequency_threshold_min"]
FREQUENCY_THRESH_MAX   = config["frequency_threshold_max"]
KEEP_ONE_VAR       = config["KeepOneVar"]
STRICT_FILTERING   = config["StrictFiltering"]
KEEP_EDITING       = config["KeepEditing"]


# --------------------------
# Rules
# --------------------------

rule all:
    input:
         f"{OUTPUT_DIR}/{RNA_ID}_annotated_filtered.table.txt"

rule run_RNA_detection:
    output:
        table = protected(f"{OUTPUT_DIR}/{RNA_ID}.table.txt")
    log:
        f"{OUTPUT_DIR}/logs/run_RNA_detection.log"
    shell:
        """
        mkdir -p {OUTPUT_DIR}/logs
        singularity exec -B /mnt/iribhm {SOFT_DIR}/reditools2_1.0.0.sif python2.7 \
            /reditools2.0/src/cineca/reditools.py \
            -S -C -bq 20 -q 20 -f {RNA_BAM} \
            -r {RESOURCE_DIR}/{REF_FA} \
            -o {output.table} > {log} 2>&1
        """

rule run_BED_conversion:
    input:
        table = f"{OUTPUT_DIR}/{RNA_ID}.table.txt"
    output:
        bed = f"{OUTPUT_DIR}/{RNA_ID}.table.bed"
    log:
        f"{OUTPUT_DIR}/logs/run_BED_conversion.log"
    shell:
        """
        tail -n +2 {input.table} > {OUTPUT_DIR}/{RNA_ID}.table.noHeader.txt
        singularity exec -B /mnt/iribhm {SOFT_DIR}/reditools2_1.0.0.sif python2.7 \
            /reditools2.0/src/cineca/reditools_table_to_bed.py \
            -i {OUTPUT_DIR}/{RNA_ID}.table.noHeader.txt \
            -o {output.bed} > {log} 2>&1
        """

rule run_DNA_detection:
    input:
        bed = lambda wildcards: CUSTOM_BED if CUSTOM_BED else f"{OUTPUT_DIR}/{RNA_ID}.table.bed"
    output:
        table = protected(f"{OUTPUT_DIR}/{DNA_ID}.table.txt")
    log:
        f"{OUTPUT_DIR}/logs/run_DNA_detection.log"
    shell:
        """
        singularity exec -B /mnt/iribhm {SOFT_DIR}/reditools2_1.0.0.sif python2.7 \
            /reditools2.0/src/cineca/reditools.py \
            -bq 20 -q 20 \
            -f {DNA_BAM} \
            -r {RESOURCE_DIR}/{REF_FA} \
            --dna \
            -B {input.bed} \
            -o {output.table} > {log} 2>&1
        """

rule run_annotation:
    input:
        rna_table = f"{OUTPUT_DIR}/{RNA_ID}.table.txt",
        dna_table = f"{OUTPUT_DIR}/{DNA_ID}.table.txt"
    output:
        annotated = f"{OUTPUT_DIR}/{RNA_ID}_annotated.table.txt"
    log:
        f"{OUTPUT_DIR}/logs/run_annotation.log"
    shell:
        """
        singularity exec -B /mnt/iribhm {SOFT_DIR}/reditools2_1.0.0.sif python2.7 \
            /reditools2.0/src/cineca/annotate_with_DNA.py \
            -r {input.rna_table} \
            -d {input.dna_table} \
            -R {RESOURCE_DIR}/{REF_FA}.fai \
            > {output.annotated} 2> {log}
        """

rule run_r_filtering:
    input:
        rna_table = f"{OUTPUT_DIR}/{RNA_ID}.table.txt", 
        annotated_table = f"{OUTPUT_DIR}/{RNA_ID}_annotated.table.txt"
    output:
        filtered_table = protected(f"{OUTPUT_DIR}/{RNA_ID}_annotated_filtered.table.txt")
    log:
        f"{OUTPUT_DIR}/logs/run_R_filtering.log"
    shell:
        """
        singularity exec -B /mnt/iribhm {SOFT_DIR}/r4.3.sif Rscript {SOFT_DIR}/Rscript_editing_filtering.R \
            RNA={input.rna_table} \
            ANNOTATED={input.annotated_table} \
            OutputPath={OUTPUT_DIR} \
            OutputFile={output.filtered_table} \
            coverage_threshold={COVERAGE_THRESH} \
            frequency_threshold_min={FREQUENCY_THRESH_MIN} \
            frequency_threshold_max={FREQUENCY_THRESH_MAX} \
            KeepOneVar={KEEP_ONE_VAR} \
            StrictFiltering={STRICT_FILTERING} \
            KeepEditing={KEEP_EDITING} > {log} 2>&1
        """



