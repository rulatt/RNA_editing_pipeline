
# RNAseq pipeline

configfile: "config_RNAseq.yaml"  # default, can be overridden with --configfile

SOFT_DIR      = config["software_dir"]
RESOURCE_DIR = config["resource_dir"]
OUTPUT_DIR   = config["output_dir"]
REF_FA       = config["ref_fa"]
RNA_ID       = config["RNA_ID"]
GENOME_DIR   = config["genome_dir"]
THREADS	     = config["threads"]
GTF_FILE     = config["gtf_file"]
READS_R1     = config["reads_R1"]
READS_R2     = config["reads_R2"]
SNPS_1000G   = config["snps_1000G"]
KNOWN_INDELS = config["known_indels"]
INDELS_1000G = config["indels_1000G"]

# --------------------------
# Rules
# --------------------------


rule make_logs_dir:
    output:
        directory(f"{OUTPUT_DIR}/logs")
    shell:
        "mkdir -p {output}"


rule all:
    input:
        f"{OUTPUT_DIR}/{RNA_ID}.rmdup.split.bqsr.bam"

rule run_STAR_genome_generate:
    output:
        f"{GENOME_DIR}/SA"
    log:
        f"{OUTPUT_DIR}/logs/run_STAR_genome_generate.log"
    shell:
        """
	
	singularity exec {SOFT_DIR}/star_2.7.11b.sif STAR --runMode genomeGenerate \
	--runThreadN {THREADS} \
	--genomeDir {GENOME_DIR} \
	--genomeFastaFiles {RESOURCE_DIR}/{REF_FA} \
	--sjdbGTFfile {RESOURCE_DIR}/{GTF_FILE} > {log} 2>&1
	
        """

rule run_STAR_mapping:
    input:
        genome_index = f"{GENOME_DIR}/SA"
    output:
        bam_prefixe = f"{OUTPUT_DIR}/{RNA_ID}Aligned.sortedByCoord.out.bam"
    log:
        f"{OUTPUT_DIR}/logs/run_STAR_mapping.log"
    shell:
        """

	singularity exec {SOFT_DIR}/star_2.7.11b.sif STAR --runMode alignReads \
	--runThreadN {THREADS} \
	--genomeDir {GENOME_DIR} \
	--genomeLoad NoSharedMemory \
	--limitBAMsortRAM 5000000000 \
	--readFilesIn {READS_R1} {READS_R2} \
	--readFilesCommand zcat \
	--outSAMtype BAM SortedByCoordinate \
	--outReadsUnmapped Fastx \
	--twopassMode Basic \
	--outFilterType BySJout \
	--outFilterMultimapNmax 1 \
	--outSAMattrRGline ID:{RNA_ID} LB:PairedEnd PL:Illumina PU:Unknown SM:{RNA_ID} \
	--outSAMattributes NH HI AS nM NM \
	--outFileNamePrefix {OUTPUT_DIR}/{RNA_ID} > {log} 2>&1
        """

rule run_samtools_process:
    input:
        bam = f"{OUTPUT_DIR}/{RNA_ID}Aligned.sortedByCoord.out.bam"
    output:
        processed_bam = f"{OUTPUT_DIR}/{RNA_ID}.processed.bam"
    log:
        f"{OUTPUT_DIR}/logs/run_samtools_process.log"
    shell:
        """
        singularity exec {SOFT_DIR}/samtools_1.22.sif samtools \
            view -@ {THREADS} \
            -F 0x04 -f 0x2 -q 20 -b \
            -o {output.processed_bam} \
	    "{input.bam}"  > {log} 2>&1

	singularity exec {SOFT_DIR}/samtools_1.22.sif samtools index {OUTPUT_DIR}/{RNA_ID}.processed.bam
        """

rule run_GATK_rmdup:
    input:
        processed_bam = f"{OUTPUT_DIR}/{RNA_ID}.processed.bam"
    output:
        rmdup_bam = f"{OUTPUT_DIR}/{RNA_ID}.rmdup.bam"
    log:
        f"{OUTPUT_DIR}/logs/run_GATK_rmdup.log"
    shell:
        """
        singularity exec {SOFT_DIR}/gatk_4.6.1.0.sif gatk MarkDuplicates \
            -I {input.processed_bam} \
            -O {output.rmdup_bam} \
            -M {OUTPUT_DIR}/{RNA_ID}_rmdup_metrics.txt \
	    --CREATE_INDEX true \
	    --TMP_DIR {OUTPUT_DIR}/tmp \
	    --REMOVE_DUPLICATES true  > {log} 2>&1
        """


rule run_GATK_splitN:
    input:
        rmdup_bam = f"{OUTPUT_DIR}/{RNA_ID}.rmdup.bam"
    output:
        split_bam = f"{OUTPUT_DIR}/{RNA_ID}.split.bam"
    log:
        f"{OUTPUT_DIR}/logs/run_GATK_splitN.log"
    shell:
        """
        singularity exec {SOFT_DIR}/gatk_4.6.1.0.sif gatk SplitNCigarReads \
            -I {input.rmdup_bam} \
            -O {output.split_bam} \
            -R {RESOURCE_DIR}/{REF_FA}  > {log} 2>&1
        """


rule run_GATK_Base_Recalibrator:
    input:
        split_bam = f"{OUTPUT_DIR}/{RNA_ID}.split.bam"
    output:
        recal_table = f"{OUTPUT_DIR}/{RNA_ID}_recal_data.table"
    log:
        f"{OUTPUT_DIR}/logs/run_GATK_Base_Recalibrator.log"
    shell:
        """
        singularity exec {SOFT_DIR}/gatk_4.6.1.0.sif gatk BaseRecalibrator \
            -I {input.split_bam} \
	    -R {RESOURCE_DIR}/{REF_FA} \
	    --known-sites {RESOURCE_DIR}/{SNPS_1000G} \
	    --known-sites {RESOURCE_DIR}/{KNOWN_INDELS} \
	    --known-sites {RESOURCE_DIR}/{INDELS_1000G} \
            -O {output.recal_table} > {log} 2>&1
        """


rule run_GATK_Apply_Recalibration:
    input:
        recal_table = f"{OUTPUT_DIR}/{RNA_ID}_recal_data.table",
        split_bam = f"{OUTPUT_DIR}/{RNA_ID}.split.bam"
    output:
        bqsr_bam = protected(f"{OUTPUT_DIR}/{RNA_ID}.rmdup.split.bqsr.bam")
    log:
        f"{OUTPUT_DIR}/logs/run_GATK_ApplyBQSR.log"
    shell:
        """
        singularity exec {SOFT_DIR}/gatk_4.6.1.0.sif gatk ApplyBQSR \
            -I {input.split_bam} \
            -R {RESOURCE_DIR}/{REF_FA} \
            -bqsr-recal-file {input.recal_table} \
            -O {output.bqsr_bam} > {log} 2>&1
        """
